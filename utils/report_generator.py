"""Comprehensive report generation for NeuroNest analysis"""

import numpy as np
from datetime import datetime
from typing import Dict, List, Optional


class ReportGenerator:
    """Generate detailed analysis reports for Alzheimer's environment assessment"""
    
    def __init__(self):
        self.alzheimer_threshold = 7.0
        self.wcag_threshold = 4.5
    
    def generate_comprehensive_report(self, results: Dict) -> str:
        """Generate ultra-detailed analysis report"""
        report = []
        
        # Header
        report.append("# 🧠 NeuroNest Comprehensive Environmental Analysis Report")
        report.append(f"**Analysis Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        report.append("")
        
        # Executive Summary
        report.extend(self._generate_executive_summary(results))
        
        # System Status
        report.extend(self._generate_system_status(results))
        
        # Segmentation Results
        if results.get('segmentation'):
            report.extend(self._generate_segmentation_section(results))
        
        # Blackspot Analysis
        if results.get('blackspot'):
            report.extend(self._generate_blackspot_section(results))
        
        # Contrast Analysis
        if results.get('contrast'):
            report.extend(self._generate_contrast_section(results))
        
        # Recommendations
        report.extend(self._generate_recommendations(results))
        
        # Clinical Benefits
        report.extend(self._generate_clinical_benefits())
        
        # Technical Details
        report.extend(self._generate_technical_details(results))
        
        # Footer
        report.extend([
            "",
            "---",
            "*Generated by NeuroNest - AI Framework for Alzheimer's Environmental Assessment*",
            "*Based on evidence-based design principles and WCAG accessibility standards*"
        ])
        
        return "\n".join(report)
    
    def _generate_executive_summary(self, results: Dict) -> List[str]:
        """Generate executive summary section"""
        lines = ["## 📊 Executive Summary", ""]
        
        # Calculate risk metrics
        risk_score, risk_factors, risk_level = self._calculate_risk_assessment(results)
        
        lines.append(f"**Overall Safety Assessment:** {risk_level}")
        lines.append(f"**Risk Score:** {risk_score}/20")
        
        if risk_factors:
            lines.append(f"**Key Risk Factors:** {', '.join(risk_factors)}")
        
        lines.append("")
        return lines
    
    def _calculate_risk_assessment(self, results: Dict) -> tuple:
        """Calculate overall risk score and assessment"""
        contrast_stats = results.get('statistics', {}).get('contrast', {})
        blackspot_stats = results.get('statistics', {}).get('blackspot', {})
        
        critical_issues = contrast_stats.get('critical_count', 0)
        total_contrast_issues = contrast_stats.get('total_issues', 0)
        blackspot_coverage = blackspot_stats.get('coverage_percentage', 0)
        blackspot_count = blackspot_stats.get('num_detections', 0)
        
        risk_score = 0
        risk_factors = []
        
        # Calculate risk score
        if critical_issues > 0:
            risk_score += critical_issues * 3
            risk_factors.append(f"{critical_issues} critical contrast issues")
        
        if total_contrast_issues > 10:
            risk_score += 2
            risk_factors.append(f"{total_contrast_issues} total contrast problems")
        
        if blackspot_coverage > 10:
            risk_score += 5
            risk_factors.append(f"{blackspot_coverage:.1f}% floor blackspot coverage")
        elif blackspot_coverage > 5:
            risk_score += 3
            risk_factors.append(f"{blackspot_coverage:.1f}% floor blackspot coverage")
        elif blackspot_count > 0:
            risk_score += 1
            risk_factors.append(f"{blackspot_count} blackspots detected")
        
        # Determine risk level
        if risk_score == 0:
            risk_level = "🟢 **EXCELLENT** - Environment exceeds Alzheimer's safety standards"
        elif risk_score >= 10:
            risk_level = "🔴 **CRITICAL** - Immediate intervention required"
        elif risk_score >= 6:
            risk_level = "🟠 **HIGH RISK** - Significant improvements needed"
        elif risk_score >= 3:
            risk_level = "🟡 **MODERATE RISK** - Some improvements recommended"
        else:
            risk_level = "🟢 **GOOD** - Minor adjustments would enhance safety"
        
        return risk_score, risk_factors, risk_level
    
    def _generate_system_status(self, results: Dict) -> List[str]:
        """Generate system status section"""
        lines = []
        system_status = results.get('statistics', {}).get('system', {})
        
        if system_status:
            lines.extend(["### 🔧 Analysis Components Used", ""])
            components = []
            
            if system_status.get('oneformer_available'):
                components.append("✅ OneFormer Segmentation (150 object classes)")
            if system_status.get('blackspot_enhanced'):
                components.append("✅ Enhanced Blackspot Detection (floor-only)")
            if system_status.get('contrast_available'):
                components.append("✅ Alzheimer's Contrast Analysis (7:1 standard)")
            
            if components:
                lines.append(" • ".join(components))
            lines.append("")
        
        return lines
    
    def _generate_segmentation_section(self, results: Dict) -> List[str]:
        """Generate segmentation results section"""
        lines = ["## 🎯 Object Detection & Segmentation Results", ""]
        
        seg_stats = results.get('statistics', {}).get('segmentation', {})
        lines.append(f"- **Total Objects Identified:** {seg_stats.get('num_classes', 0)}")
        lines.append(f"- **Image Resolution:** {seg_stats.get('image_shape', 'Unknown')}")
        lines.append(f"- **Segmentation Method:** OneFormer with ADE20K (150 indoor classes)")
        lines.append("")
        
        return lines
    
    def _generate_blackspot_section(self, results: Dict) -> List[str]:
        """Generate blackspot analysis section with confidence metrics"""
        lines = ["## ⚫ Blackspot Hazard Analysis"]
        lines.append("*Detecting dark floor areas that may be misperceived as holes or voids*")
        lines.append("")
        
        bs = results.get('blackspot', {})
        bs_stats = results.get('statistics', {}).get('blackspot', {})
        
        lines.append("### Detection Results")
        lines.append(f"- **Blackspots Found:** {bs_stats.get('num_detections', 0)} areas")
        lines.append(f"- **Total Floor Area:** {bs_stats.get('floor_area', 0):,} pixels")
        lines.append(f"- **Blackspot Coverage:** {bs_stats.get('coverage_percentage', 0):.2f}% of floor")
        lines.append(f"- **Detection Confidence:** {bs.get('avg_confidence', 0):.1%}")
        lines.append(f"- **Detection Method:** {bs_stats.get('detection_method', 'Enhanced pixel analysis')}")
        lines.append(f"- **Minimum Size:** 50×50 pixels (significant hazards only)")
        lines.append("")
        
        # Floor type breakdown
        floor_breakdown = bs.get('floor_breakdown', {})
        if floor_breakdown:
            lines.append("### Floor Type Analysis")
            for floor_type, data in floor_breakdown.items():
                cov = data['coverage_percentage']
                lines.append(f"- **{floor_type.title()}:** {cov:.1f}% blackspot coverage")
            lines.append("")
        
        # Risk Assessment
        lines.extend(self._generate_blackspot_risk_assessment(bs_stats))
        
        return lines
    
    def _generate_blackspot_risk_assessment(self, bs_stats: Dict) -> List[str]:
        """Generate blackspot risk assessment"""
        lines = ["### Blackspot Risk Assessment"]
        coverage = bs_stats.get('coverage_percentage', 0)
        
        if coverage > 15:
            lines.extend([
                "🚨 **EXTREME HAZARD** - Severe blackspot coverage",
                "- Immediate removal of all dark flooring required",
                "- Install high-contrast edge markers",
                "- Add supplemental lighting (minimum 1000 lux)"
            ])
        elif coverage > 10:
            lines.extend([
                "🔴 **CRITICAL HAZARD** - Extensive blackspot coverage",
                "- Priority removal of dark floor areas",
                "- Install LED floor lighting"
            ])
        elif coverage > 5:
            lines.extend([
                "🟠 **HIGH HAZARD** - Significant blackspot presence",
                "- Replace dark rugs/mats with light colors",
                "- Add contrasting borders to dark areas"
            ])
        elif bs_stats.get('num_detections', 0) > 0:
            lines.extend([
                "🟡 **MODERATE HAZARD** - Some blackspots detected",
                "- Consider lighter floor coverings",
                "- Ensure adequate lighting"
            ])
        else:
            lines.extend([
                "✅ **NO HAZARD** - No blackspots detected",
                "- Floor contrast is appropriate for Alzheimer's care"
            ])
        
        lines.append("")
        return lines
    
    def _generate_contrast_section(self, results: Dict) -> List[str]:
        """Generate contrast analysis section"""
        lines = ["## 🎨 Contrast Analysis for Alzheimer's Care"]
        lines.append("*Evaluating color contrast between adjacent objects (7:1 minimum for dementia)*")
        lines.append("")
        
        contrast_data = results.get('contrast', {})
        contrast_stats = results.get('statistics', {}).get('contrast', {})
        
        lines.append("### Analysis Summary")
        lines.append(f"- **Total Object Pairs Analyzed:** {contrast_stats.get('total_pairs_checked', 0)}")
        lines.append(f"- **Adjacent Pairs Found:** {contrast_stats.get('adjacent_pairs', 0)}")
        lines.append(f"- **Total Contrast Issues:** {contrast_stats.get('total_issues', 0)}")
        lines.append(f"- **Good Contrasts:** {contrast_stats.get('good_contrast_count', 0)}")
        lines.append("")
        
        # Issue breakdown
        lines.append("### Issue Breakdown by Severity")
        lines.append(f"- 🔴 **Critical Issues:** {contrast_stats.get('critical_count', 0)} (safety-critical, need immediate fix)")
        lines.append(f"- 🟠 **High Priority:** {contrast_stats.get('high_count', 0)} (navigation/recognition impact)")
        lines.append(f"- 🟡 **Medium Priority:** {contrast_stats.get('medium_count', 0)} (comfort/clarity impact)")
        lines.append(f"- 🔵 **Low Priority:** {contrast_stats.get('low_count', 0)} (minor improvements)")
        lines.append("")
        
        # Critical issues detail
        critical_issues = contrast_data.get('critical_issues', [])
        if critical_issues:
            lines.append("### 🚨 Critical Contrast Issues (Immediate Action Required)")
            for i, issue in enumerate(critical_issues[:5], 1):
                lines.append(f"\n**{i}. {issue['categories'][0]} ↔ {issue['categories'][1]}**")
                
                if 'metrics' in issue:
                    metrics = issue['metrics']
                    lines.append(f"- Contrast Ratio: {metrics.get('wcag_contrast', 0):.2f}:1 (need ≥7:1)")
                    lines.append(f"- Hue Difference: {metrics.get('hue_difference', 0):.1f}° (need ≥30°)")
                
                for problem in issue.get('issues', [])[:2]:
                    lines.append(f"- ⚠️ {problem}")
            
            if len(critical_issues) > 5:
                lines.append(f"\n*...and {len(critical_issues) - 5} more critical issues*")
            lines.append("")
        
        # Good contrasts
        good_contrasts = contrast_data.get('good_contrasts', [])
        if good_contrasts:
            lines.append("### ✅ Excellent Contrasts (Meeting Standards)")
            for good in good_contrasts[:3]:
                lines.append(f"- **{good['categories'][0]} ↔ {good['categories'][1]}**: {good['contrast_ratio']:.1f}:1 ratio")
            
            if len(good_contrasts) > 3:
                lines.append(f"*...and {len(good_contrasts) - 3} more good contrasts*")
            lines.append("")
        
        return lines
    
    def _generate_recommendations(self, results: Dict) -> List[str]:
        """Generate evidence-based recommendations"""
        lines = ["## 📋 Evidence-Based Recommendations for Alzheimer's Safety", ""]
        
        contrast_stats = results.get('statistics', {}).get('contrast', {})
        blackspot_stats = results.get('statistics', {}).get('blackspot', {})
        
        critical_issues = contrast_stats.get('critical_count', 0)
        blackspot_coverage = blackspot_stats.get('coverage_percentage', 0)
        
        # Immediate actions
        if critical_issues > 0 or blackspot_coverage > 10:
            lines.append("### 🚨 IMMEDIATE ACTIONS (Within 24-48 Hours)")
            
            if critical_issues > 0:
                lines.extend([
                    "**Contrast Improvements:**",
                    "- Replace similar-colored adjacent objects immediately",
                    "- Add high-contrast borders (minimum 2 inches wide)",
                    "- Use warm colors (red, orange, yellow) against cool backgrounds",
                    ""
                ])
            
            if blackspot_coverage > 10:
                lines.extend([
                    "**Blackspot Elimination:**",
                    "- Remove or cover all dark floor areas",
                    "- Install light-colored rugs or floor coverings",
                    "- Add LED strip lighting at floor level",
                    ""
                ])
        
        # Short-term improvements
        lines.extend([
            "### 📅 Short-Term Improvements (Within 1-2 Weeks)",
            "- **Lighting:** Increase to 1000+ lux throughout living spaces",
            "- **Color Scheme:** Implement warm, high-saturation colors",
            "- **Patterns:** Add patterns/textures to enhance object distinction",
            "- **Labeling:** Consider large-print labels on similar-looking objects",
            ""
        ])
        
        # Long-term strategies
        lines.extend([
            "### 🎯 Long-Term Environmental Strategies",
            "- **Regular Assessment:** Monthly contrast and blackspot checks",
            "- **Adaptive Changes:** Adjust environment as condition progresses",
            "- **Professional Consultation:** Work with dementia care specialists",
            "- **Technology Integration:** Consider smart lighting systems",
            ""
        ])
        
        return lines
    
    def _generate_clinical_benefits(self) -> List[str]:
        """Generate clinical benefits section"""
        return [
            "## 🏥 Expected Clinical Benefits",
            "Implementing these recommendations should lead to:",
            "- **↓ 40-60% reduction in falls** through better floor visibility",
            "- **↑ Improved spatial navigation** and reduced confusion",
            "- **↑ Enhanced independence** in daily activities",
            "- **↓ Reduced anxiety** from environmental uncertainty",
            "- **↑ Better sleep patterns** through appropriate lighting",
            ""
        ]
    
    def _generate_technical_details(self, results: Dict) -> List[str]:
        """Generate technical details section"""
        contrast_stats = results.get('statistics', {}).get('contrast', {})
        
        return [
            "## 📊 Technical Analysis Details",
            f"- **WCAG Threshold Used:** {contrast_stats.get('wcag_threshold', self.wcag_threshold)}:1",
            f"- **Alzheimer's Threshold:** {contrast_stats.get('alzheimer_threshold', self.alzheimer_threshold)}:1",
            "- **Color Analysis:** RGB, HSV, and luminance-based",
            "- **Adjacency Detection:** Direct boundary analysis only",
            "- **Minimum Hue Difference:** 30° for color distinction",
            ""
        ]
